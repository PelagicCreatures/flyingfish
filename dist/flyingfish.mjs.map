{"mappings":";;ACEA;AAKA,MAAM,yCAAU,SAAS,eAAQ;IAChC,YAAa,OAAO,EAAE,OAAO,GAAG,EAAE,CAAE;QACnC,KAAK,CAAC,OAAO,EAAE;YACd,aAAa,EAAE,IAAI;SACnB,CAAC;QACF,IAAI,CAAC,SAAS,GAAG,KAAK;KACtB;IAED,aAAa,GAAI;QAChB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACpB,IAAI,CAAC,SAAS,GAAG,IAAI;YAErB,MAAM,OAAO,GAAG,CAAC;;;;;IAKhB,CAAC;YAEF,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,OAAO,CAAC;YAEvC,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC;YAElD,yBAAyB;YACzB,IAAI,CAAC,MAAM,CAAC,KAAK,SAAS,EACzB,MAAM,GAAG,IAAI,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI;YAG7C,yCAAyC;YACzC,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE;gBACpC,GAAG,EAAE,MAAM;aACX,CAAC;SACF;KACD;IAED,sCAAsC;IACtC,eAAe,CAAE,EAAE,EAAE,IAAI,EAAE;QAC1B,IAAI,EAAE,KAAK,YAAY,EAAE;YACxB,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC;YAC7C,MAAM,KAAK,GAAG,IAAM;gBACnB,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,KAAK,EACjC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC;qBAE9C,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,eAAe,GAAG,MAAM,GAAG,IAAI,CAAC,OAAO,GAAG,GAAG;gBAEjE,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC;gBACnC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,6BAA6B,CAAC,CAAC;gBAC1E,IAAI,CAAC,KAAK,EAAE,CAAC,6BAA6B;;aAC1C;YACD,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;SACtB;QACD,KAAK,CAAC,eAAe,CAAC,EAAE,EAAE,IAAI,CAAC;KAC/B;IAED,OAAO,GAAI;QACV,IAAI,IAAI,CAAC,OAAO,EACf,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC;QAElC,KAAK,CAAC,OAAO,EAAE;KACf;CACD;AAED,YAAK,CAAC,qBAAqB,CAAC,YAAY,EAAE,yCAAU,CAAC;;ADvDrD","sources":["index.mjs","lib/FlyingFish.mjs"],"sourcesContent":["/**\n\t@PelagicCreatures/FlyingFish\n\n\tSargasso class that implements lazy loaded images using background-image\n\tcss properties or the src attribute on an IMG tag. Image is loaded using\n\ta web worker and the DOM is updated in an Animation Frame for optimal\n\tperformance.\n\n\t@author Michael Rhodes\n\t@license MIT\n\tMade in Barbados ðŸ‡§ðŸ‡§ Copyright Â© 2020-2021 Michael Rhodes\n\n**/\n\nimport {\n\tFlyingFish\n}\n\tfrom './lib/FlyingFish'\n\nexport {\n\tFlyingFish\n}\n","/* \tMade in Barbados ðŸ‡§ðŸ‡§ Copyright Â© 2020-2021 Michael Rhodes */\n\nimport {\n\tSargasso, utils\n}\n\tfrom '@pelagiccreatures/sargasso'\n\nclass FlyingFish extends Sargasso {\n\tconstructor (element, options = {}) {\n\t\tsuper(element, {\n\t\t\twatchViewport: true\n\t\t})\n\t\tthis.triggered = false\n\t}\n\n\tenterViewport () {\n\t\tif (!this.triggered) {\n\t\t\tthis.triggered = true\n\n\t\t\tconst offload = `onmessage = async (e) => {\n\t\t\t\tconst response = await fetch(e.data.url)\n\t\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\t\tconst blob = await response.blob()\n\t\t\t\tself.postMessage({ uid: e.data.uid, blob: blob, contentType: contentType})\n\t\t\t}`\n\n\t\t\tthis.workerStart('FlyingFish', offload)\n\n\t\t\tlet imgUrl = this.element.getAttribute('data-src')\n\n\t\t\t// not fully qualified...\n\t\t\tif (!imgUrl.match(/^http/)) {\n\t\t\t\timgUrl = new URL(imgUrl, location.href).href\n\t\t\t}\n\n\t\t\t// hand the url to the worker for loading\n\t\t\tthis.workerPostMessage('FlyingFish', {\n\t\t\t\turl: imgUrl\n\t\t\t})\n\t\t}\n\t}\n\n\t// we got a message back from a worker\n\tworkerOnMessage (id, data) {\n\t\tif (id === 'FlyingFish') {\n\t\t\tthis.blobURL = URL.createObjectURL(data.blob)\n\t\t\tconst frame = () => {\n\t\t\t\tif (this.element.tagName === 'IMG') {\n\t\t\t\t\tthis.element.setAttribute('src', this.blobURL)\n\t\t\t\t} else {\n\t\t\t\t\tthis.element.style.backgroundImage = 'url(' + this.blobURL + ')'\n\t\t\t\t}\n\t\t\t\tthis.addClass('flying-fish-loaded')\n\t\t\t\tthis.element.dispatchEvent(new CustomEvent('sargasso-flying-fish-loaded'))\n\t\t\t\tthis.sleep() // We're done. That was easy.\n\t\t\t}\n\t\t\tthis.queueFrame(frame)\n\t\t}\n\t\tsuper.workerOnMessage(id, data)\n\t}\n\n\tdestroy () {\n\t\tif (this.blobURL) {\n\t\t\tURL.revokeObjectURL(this.blobURL)\n\t\t}\n\t\tsuper.destroy()\n\t}\n}\n\nutils.registerSargassoClass('FlyingFish', FlyingFish)\n\nexport {\n\tFlyingFish\n}\n"],"names":[],"version":3,"file":"flyingfish.mjs.map"}